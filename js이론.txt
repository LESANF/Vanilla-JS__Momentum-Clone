변수를 선언할때는 const로, let은 정말 필요할때 사용

camel case = 변수명을 정할때 스페이스대신 대소문자를 바꿔주는것 예 : lowerOfWeek

데이터를 정렬하는방법 두가지 : Array, Object

DB에서 가져온경우 Array를 사용

html의 셀렉터를 js만으로 수정할때 document를 사용하는데 document또한 오브젝트이다.

HTML DOCUMENT는 자바스크립트가 된다.

DOM = Document Object Module

자바스크립트는 html에 있는 모든 요소를 가져오고 그것을 객체로 바꾼다.

우리가 배울 모든함수들, 우리가 찾게 될 모든 객체들의 함수들을 DOM 형태로 변경 가능



Object안에 Array를 넣을 수 있다.

Array ex) const myInfo = [ 'mon', 'tue', 'wed', '-----' ];

Object 선언은 { } (컬리브라켓)	

Console.log 에서 Console은 Object, log는 function

(function 만드는법)
= function functionName (){}

js에서 "name is "+ name 하는것보다 `name is ${name}` 편하다


---------------------
(window.event)

window.addEventListener("이벤트" , 이벤트에서 다룰함수);

window.addEventListener에서 함수를 호출할때 functionName()으로 호출하지않는다.

function()은 지금 바로 호출되는것이고.  

window.addEventListener("resize", functionName)은 resize했을때 함수를 호출하는것이다.

()을 붙인 functionName()을 사용하게 되면 resize를 하지않았음에도 함수가 호출될것이다.

이벤트를 다룰 함수를 만들때마다 js는 자동적으로 함수를 객체에 붙인다.

const 변수를 만들때 변수명은 대문자로 ex) const BASE_COLOR 

-----------------------------------

html에 태그에 class=""따로 주지않아도

css파일에 .classname{}으로 클래스부분 먼저 작성가능하다.

js에 함수를 설정하고 "click" 이벤트시 .class를 추가하는 함수로 만들고

동시에 css에도 해당 태그에 transition을 주면 애니메이션을 섞을 수 있다.

만약 Js에서 태그에 className을 부여하는 함수를 사용하기전

애초에 css에서 태그에 class달아놓은 경우 함수가 실행되면 이전 class를 대체하여

함수에서 받은 className으로 적용된다.

contains = 전달한 class값이 그 엘리먼트의 class속성에 존재하면 true, 없으면 false를 리턴

toggle = 인자 하나만 사용했을때 class값을 껏다 켰다. 만일 class가 있으면 지우고 false를 리턴 그렇지않으면

추가하고 true를 리턴.

ClassList의 속성들을 if, else문과  add, remove, contains와 함께 사용하여 toggle의 효과를 나타낼 수 있음.

2.7강의 보면 toggle의 내용을 위와같은 속성으로 예제를잡으며 설명해줌.

ClassList 관련 속성 설명
https://gafani.tistory.com/entry/javascript-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%86%8D%EC%84%B1-%EB%8B%A4%EB%A3%A8%EA%B8%B0


모든 js파일을 만들었을때 기분적으로 초기화 함수를 생성하는 습관을들이자
ex) function init() {} , init();

querySelector는 해당 인자의 첫번째 요소만 불러들인다.
-> document.querySelector(".xyz"); 의 뜻은 클래스값이 xyz인 첫번째 요소에접근한다는 뜻이다.
--------------
(clock 부분)

setInterval : 두개의 인자값(arguments)을 받고 첫번째 인자로 실행할 함수를 받고, 실행할 시간 간격이다.
실행간격 시간은 초가아닌 밀리세컨드단위라 3초로 지정해주려면 3000으로 해야한다.

로컬 스토리지, 세션 스토리지의 차이 로컬은 사이트에 계속유지, 세션은 창을 닫을경우 사라짐
localstorage : .setIteml(arg1, arg2) / arg1은 key값 arg2는 value값
getIteml을 할경우 (arg1) 즉 key값을 부르면 value값이 따라온다.
---------------------------

(localStorage 부분 함수) / * 이름을 저장하는 방법 * /

greeting.js 명으로 새파일 만듬. 

index.html에 <script src="greeting.js"></script> 추가 해서 연결

html파일에 있는 form에 클래스명 js-form 추가해줌.

greeting.js에서 function init() 함수만들고 init(); 초기화 함수 생성

const 변수로 const form = document.querySelector(".js-form") 추가.
->이는 form의 class명인 .js-form을 인자로 선택하여  form 자체를 불러오는것이다
form안의 모든요소와 같이.

const input = form.querySelector("input") 역시 input 요소를 불러오는것.

.showing 함수는 display:none으로 보이지않았던것을 block 처리함으로 다시 보여지게한다.

input에 내용을 적고 enter를하면 다른곳으로 보내진다 이게 기본값.

<애초에 .form 과 .grettings 클래스에 display:none으로 보이지않게 해놨고 이를 .showing클래스를 통해 clastList add, remove로 보여주고 안보여주고를 설정해준다 함수로

그것을 막기위해 preventDefault를 사용하는것, enter를 눌러도 값이 없어지지않음. ( 기본동작을 막는 1단계 )
-> const currentValue = input.value; 다음과같은 코드로 input에 입력에 대한 값을 currentValue에 저장할수있음.

입력할 내용과 ON/OFF처럼 클래스를 추가하고 빼줄 객체인 const USER_LS="currentUser", SHOWING="showing" (showing은 css파일에있는 .showing클래스이다. html파일에는 없음) 를 만듬

초기화 함수인 init()을 실행하면. 안에있는 loadName()함수가 호출

loadName 함수안에서 const currentUser 객체는 localStorage.getItem(USER_LS);의 명령어로 USER_LS라는 키값을 불러온다. 
-> 즉, loadName 안에서의 const currentUser = 밖에서 정의한 const USER_LS의 값인 currentUser를 문자형으로 받아온다.

초기에는 localStorage에 값이 없기때문에 당연히 currentUser는 null 상태이다.

if문을 통해 null일때 askForName() 함수를 호출, 아닐때 paintGreetings함수를 호출한다.

askForName()함수에서 form.classList.add(SHOWING); 을 통해 안보였던 부분(타이핑할 input창)을 .showing 클래스를 추가함으로써 보이게하고
form.addEventListener("submit", handleSubmit); [submit = 사용자가 버튼키를 이용하여 폼을제출할 때] 을 통해 웹페이지에서 input을통해 입력한값이 handleSubmit함수를 호출

event.preventDefault();는 이벤트의 기본동작을 중지한다. 고로 input에서 text를 치고 엔터를하면 사라져야할 텍스트를 안사라지게 하는 기능을한다.

handleSubmit함수안에 정의된 currentValue에는 input.value값이 저장된다. 즉 submit으로 text타이핑했던 값이 currentValue에 들어간다.

그리고 paintGrettings(currentValue) 함수를 호출하며 매개변수로 currentValue를 넘겨준다.

paintGrettings함수는 받은 currentValue값을 text로 인식하고 
form.classList.remove(SHOWING)을 실행. SHOWING은 밖에서 정의해둔 const SHOWING = "showing";
-> 폼에있는 showing 클래스를 제거한다. ( form에있는 showing 클래스를 제거한다는 뜻은 input창을 안보이게 한다는것이다. )

gretting.classList.add(SHOWING) 을통해 h4를 보이게한다.
gretting.innerText = ` ${text}` 를통해 텍스트를 넣고 그값은 매개변수로받은 text 즉 currentValue (input.value)값을 h4에 넣어 보이게한다.

이방법을 통하면 새로고침을해도 localstorage에 key, value값이 남아있다. 이를 유지시키기위해 saveName이라는 함수를 생성한다.

saveName에는 매개변수로 (text)를 설정하고 handleSubmit안에서 실행된다 text로 갈 매개변수값은 currentValue이다.

localStorage.setItem(key, value)를 통해 (USER_LS, text)의 값을 주고 이는 (currentUser, currentValue)이다. 이렇게하면 새로고침해도 localstorage에 남아있음으로 유지된다.

------------------------------------------------------------------------

텍스트를 남기면 리스트로 남기게 하기위해 todo.js파일 생성

h4밑에 새로운 form (js-toDoForm)클래스 생성후 안에 input 하나생성

폼바로 밑에 ul 생성하고 클래스는 js-toDoList로. 내부의 li는 비움. ( 함수로 만들거기때문.)

마찬가지로 todo.js 파일에 function init()으로 초기화 함수 만들고 호출 init();

init함수 안에는 loadToDos();와 toDoForm.addEventListener("submit",handleSubmit)이 있다.

toDoForm.addEventListener("submit",handleSubmit)의 경우 앞선 gretting과 비슷하게
->toDoForm이라 앞선 js-form과는 다르다.

값을 넘기고 handleSubmit함수를 호출하여 event를 매개변수로 하고 

event.preventDefault();를 실행 앞에서와 똑같이 input에서 enter를 칠때 값이 넘어가는 기본이벤트를 취소

const currentValue로 toDoInput.value의 값을 저장.

paintToDo(currentValue) currentValue를 paintToDo함수에 매개변수로 넘김 input의 value값을 넘기는의미.

그리고 toDoInput.value의 값은 "" 공백으로 유지시켜줌 리스트가 하나가아니라 여러개일경우

하나를 넘기고 또다시 입력해야 되기 때문에 value값을 ""로 설정.

현재 html파일에는 <ul class="js-toDoList"> </ul>만 있을뿐 내부에 <li></li> 들이 없다.
그래서 함수로 li를 생성해줘야 하고 그것을 paintToDo함수를 통해 실행한다.

paintToDo(text) 함수는 currentValue의 값을 매개변수로 받았고 그러므로 text = currentValue = input.Value와같다.

li라는 태그를 생성해야되기때문에, const li = document.createElement("li")를 기입

목록을 생성하면 지우는 버튼도 만들어야 하기 때문에 const delBtn = document.createElement("button")도 생성

toDoInput에 작성한 내용이 span으로 들어가야함으로 마찬가지로 const span = document.createElement("span") 생성

앞선 span, delBtn, li를 ul의 요소로 추가시키기 위해서는 appendchid()라는 함수를 사용한다.  이경우 li에 추가해야하니
->li.appendchild(span) 이런식으로 부모에게 span을 추가시킨다. btn과 id모두 방식은 동일	

li에 span, btn 을넣고 그 li를 ul에 담아야함으로 <ul class="js-toDoList>즉, toDoList.appendChild(li); 를 넣어준다

toDoList는 함수밖에서 const  toDoList = document.querySelector("js-toDoList")로 생성.

그리고 btn과 span의 text 내용은 innerText로 처리한다 delBtn.innerText ="X"; (X의 경우 이모지인데 HTML 헤더에서 

<meta charset="utf-8"/> 을 추가시켜주지 않으면 이모지가 깨진다. span의 text는 매개변수로 받은 text의 값을 이용해

span.innerText = text; 여기서 text는 paintToDo함수의 매개변수인 text즉 handleSubmit의 currentValue이다.

그리고 여기서 계속 li를 ul에 추가하는것은 양이 많아질 수 있으므로, ary하나를 만들어 담는다. 
-> let toDos = [];

toDos라는 이름을 가진 배열에 넣을 객체 obj를 만들어야한다. paintToDo함수 내에서 실행이 될것이고

생성할 객체는 const toDoObj = { text : text, id = newId }; 로 객체 생성한다. text는 앞선 매개로받은 text이고

newId는 배열의 길이이다. newId역시 painToDo 함수내에 선언한다. const newId = toDos.length+1; 
-> length+1을 해주는 이유는 초기 배열에 아무것도 없으므로 0이다. 하지만 하나를 넣었을때 1, 그 1을 id값으로 이용하기위해 +1을한다
3개를 넣었다고 가정할때 순서대로 1,2,3...의 id 값을 줄 수 있다.

toDoObj의 객체를 생성한 후, toDos 배열에 넣어줘야 하므로, toDos.push(toDoObj)코드를 삽입.

여기까지하면 ul에 li를 넣으면서 id를 부여하고 객체까지 넣을 수 있다. 하지만 새로고침하면 날아간다. localStorage에 저장되어있지 않기때문에
-> 그래서 paintToDo 함수가 끝나기전 마지막으로 LS에 저장하게 할 수 있는 함수를 하나 호출한다. saveToDos();
반드시 push한 후 saveToDos함수를 호출할것. 내용을 집어넣어야 localStorage에 넣을 값이 생김.

saveToDos로 넘어가게 되면 하는 일은 localStorage에 setItem을 시켜야한다. 값을 넣는거니 set, 그리고 key, value값이 필요
-> localStorage.setItem(key, value), 여기서 key값은 TODOS_LS이다. TODOS_LS는 밖에서 const로 toDos로 선언되어있다.

localStorage에 toDos라는 key이름과 toDos라는 배열의 value값을 넣는다. value값을 넣기전에 잠깐 짚고 넘어가야될 건이있다.

localStorage에는 자바스크립트의 data를 넣을 수 없다 그렇기때문에 value에 toDos라는 배열을 넣으면 원하는 결과대로 안나오고 object Object 이런식으로 표시된다.

오직 String형만 localStorage에 저장할 수 있다. 예를들어 key에 hello, value에 true면 우리가아는 boolean의 true가아니라 String의 "true"로 출력이 된다.

넣으려는 value의 String형 변환을 위해 JSON.stringify를 사용한다 정확하게는 자바스크립트 Obj를 String으로 변환
. 최종식은
-> localStorage.setItem(TODOS_LS, JSON.stringify(toDos)); 가 되면 우리가 원하는 obj형태로 저장이된다.

다시 loadedToDos함수로가서. 하나의 선언을한다.
-> const loadedToDos = localStorage.getItem(TODOS_LS); key갑시 TODOS_LS 즉 "toDos" 의 값을가져옴
이것은 배열로 저장한 key값이다.

여기서 if문을 사용.

만약 loadedToDos가 null아닐때. 즉 LS에서 getItem한 값이 있을때. (이미 저장된값이 있을때)
다음과 같은 if문을 실행한다. 아닐시에는 함수 탈출해서 init()안에 있는 toDoForm.addEventListener("submit",handleSubmit) 함수실행

(다음은 if가 null이 아닐경우 = locaStorage에값이 들어있는경우)
const parsedToDos = JSON.parse(loadedToDos); 을 선언한다.
->parsedToDos를 선언하고 (loadedToDos = localStorage에서 가져온 toDos의 value값)을 다시 객체화 시킨다.
-> JSON으로 문자열되어있던것을 다시 객체로 바꾸는 용도.

parsedToDos.forEach(function(toDo){ 가져온 객체를 forEach(반복문)으로 다시 출력한다.
-> foreach의 기본형식 / array가 가지고 있는것 foreach
-> 변수명.forEach(function(매개변수 자기가 지은이름){
                    함수식 ( ex : function(위와같은 매개변수 자기가지은이름 )
});

paintToDo(toDo.text); 
});
-> 객체화한 toDos의 객체값을 순서대로 출력하기위해 paintToDo(toDo.text)를 반복한다. 
-> Obj의 text부분만 paintToDO로보내 출력시킨다.

paintToDo는 li,btn,span,newId등등의 속성을 만들어주고 여기서 toDo.text가 paintToDo의 매개변수로 들어가기때문에

paintToDo의 text는 toDo.text가 된다 그러므로 text : text;는 text : toDo.text; 이다.


------------------------------------


btn을 삭제할 수 있게 기능을 넣어야하므로.  delBtn.addEventListener("click", deleteToDo), 버튼을 클릭했을때 이벤트

deleteToDo 함수로 이동,  function deleteToDo(event) event를 매개로 받고 함수 내에서 btn, li를 선언

const btn = event.target;  은 버튼을 클릭했을때 event가 일어나는 대상을 가르킨다. 여기서는 button

const li = btn.parentNode; 버튼을 삭제시키면 결국 li를 다날려야하므로 눌러진 버튼의 부모요소인 li를 날리기위해 parentNode를 지정한다

event.target = button
btn.parentNode = li

appendChild 처럼 태그를 추가하는것만이아니라 removeChild로 제거할 수 도있다.

const btn = event.target;
const li = btn.parentNode;
toDoList.removeChile(li);  [toDoList = .js-toDoList = ul]
-> 세줄의 코드가 있어야 버튼을 눌렀을때 li가 제거된다.

*정리*

btn을 선언하고 그것을 담는것은 넘겨받은 이벤트인 click이 실해되는 부분 즉 button
변수명인 li를 선언하고(태그 li아님) 그 button의 부모요소를 담는다 즉 태그 li
ul에서 태그를삭제한다 li 여기서 li는 태그li가아닌 앞선 button의 부모요소를 담는 li (태그li와 선언된 li를 혼동하지말자 append에는 선언된 li가들어간다.

여기까지하면 삭제는 되지만 localStorage에서는 삭제가안된다 새로고침하면 다시 되돌아옴 이걸 해결해야함.

const cleanToDos를 선언 여기서 filter함수를 쓸거임. 이건 true인것만 다시 받아 array로 넣어주는 느낌의 함수.
-> return toDo.id !== parseInt(li.id); 의조건에 true인것만 cleanToDos가된다.
li.id는 String이기때문에 parseInt로 숫자로 만듬

return식을 해석하자면 toDo.id와 li.id가 틀린것만 반환한다. 각 li마다 고유 id가있다 ary.length+1로 부여해놓음

버튼이 이미있다고 가정할때. li.id는 btn의 부모즉 li를 가르키고. (deleteToDo의 li선언은 event.target의 btn의 부모 li를 담았기때문)
toDo.id는 push로 인해 객체를 담아놓은 toDos(배열)의 객체 id를 가르킨다.

li.id는 생성된 버튼의 id
toDo.id는 Obj를 push해서 toDos(배열)에 담아놓은 객체의 id를 뜻함

let toDos = [];로 바꾼이유는 toDos를 바뀐 cleanToDos로 재정의해야하는데 const는 어울리지않기때문.
cleanToDos는 삭제가 일어난 새로운 배열이기 때문에 toDos에 덮어야하고
그 덮은값을 유지하기위해 saveToDos();로 다시 localStorege에 저장해야함


loadToDos()함수는 localStorage에있는 키값을 가져오는 것이다 
여기서 키값은 밖에서 const 정의해둔 TODOS_LS이고 이는 "toDos" 이다.
키값을 가져올때는 getItem을 사용하고 key이름은 "toDos"인 키를 가져온다.

if문에서 가져온 키값이 null이 아닐때 조건으로 내부식이 실행된다.

const parsedToDos = JSON.parse(loadedToDos);
-> parsedToDos가 JSON.parse함수에 의해 가져온 키값을 String형에서 객체로 바꿔준다.

locaStorage는 String형 즉 문자형만 인정되므로 가져올때도 String형이다. 예를 들어 

value값에 true를해도 이것은 boolean의 true가아닌 String의 true이다. 이를 바꿔주기 위해 JSON.parse가 필요하다.








